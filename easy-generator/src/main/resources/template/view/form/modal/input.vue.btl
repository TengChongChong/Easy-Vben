<script lang="ts" setup>
<% if(basicsConfig.listGeneratorTemplate == 'tree-table'){ %>
import type { TreeNode } from '#/api/base/model/tree-model';
<% } %>
import type { ${basicsConfig.modelName}VO } from '${modelTsPath!}';

import { ref } from 'vue';

import { useVbenModal, z } from '@vben/common-ui';
<% if(basicsConfig.listGeneratorTemplate == 'tree-table'){ %>
import { listToTree } from '@vben/utils';
<% } %>
import {
  message,
  Space,
} from 'ant-design-vue';

import { useVbenForm } from '#/adapter/form';

import { ${GeneratorVueUtil.getInputImport(basicsConfig)} } from '${apiTsPath!}';
import { ButtonClose, ButtonSave } from '#/components/button';

const emit = defineEmits(['success']);

const saveBtnLoading = ref(false);

const [BaseForm, baseFormApi] = useVbenForm({
  showDefaultActions: false,
  schema: [
    { fieldName: 'id', component: 'Input', formItemClass: 'hidden' },
    { fieldName: 'version', component: 'Input', formItemClass: 'hidden' },
    <% if(tableConfig != null) { %>
    <% for(item in inputConfig){ %>
    {
      <% if(basicsConfig.listGeneratorTemplate == 'tree-table' && item.propertyName == 'parentId'){ %>
      fieldName: 'parentId',
      label: '上级',
      component: 'ApiTreeSelect',
      componentProps: {
        api: selectAllApi,
        afterFetch: (res) => {
          const treeNodes: TreeNode[] = [] as TreeNode[];
          res.forEach((item) => {
            const { id, parentId, title } = item;
            treeNodes.push({
              id,
              parentId,
              label: title,
              value: id,
              key: id,
            });
          });
          return listToTree(treeNodes);
        },
      },
      <% } else { %>
      fieldName: '${item.propertyName}',
      label: '${item.label}',
      component: '${item.componentType}',
      <% if(strUtil.isNotBlank(item.dictType)) { %>
      componentProps: {
        dictType: '${item.dictType}',
      },
      <% } else if(item.componentType == 'DatePicker') { %>
      componentProps: {
        showTime: true,
      },
      <% } else if(item.componentType == 'InputNumber') { %>
      componentProps: {
        min: 0,
      },
      <% } else if(item.componentType == 'Textarea') { %>
      componentProps: {
        autoSize: {
          minRows: 2,
          maxRows: 7,
        },
      },
      <% } %>
      <% if(GeneratorVueUtil.needRule(item)) { %>
      ${GeneratorVueUtil.getFormRules(item)}
      <% } %>
      <% } %>
    },
    <% } %>
    <% } %>
  ],
});

async function handleSubmit(callback: (res: ${basicsConfig.modelName}VO) => any) {
  try {
    saveBtnLoading.value = true;
    const { valid } = await baseFormApi.validate();
    if (!valid) {
      return;
    }
    const values: ${basicsConfig.modelName}VO = await baseFormApi.getValues();
    const res = await saveApi(values);
    message.success('保存成功');
    emit('success');
    callback(res);
  } catch (error) {
    console.error('保存失败', error);
  } finally {
    saveBtnLoading.value = false;
  }
}

async function handleSave() {
  await handleSubmit(() => {
    drawerApi.close();
  });
}
<% if(basicsConfig.generatorMethodsAdd){ %>
async function handleSaveAndAdd() {
  await handleSubmit(() => {
    baseFormApi.resetForm();
    addApi().then((res) => {
      baseFormApi.setValues(res);
    });
  });
}
<% } %>

const [Modal, drawerApi] = useVbenModal({
  onOpenChange: async (isOpen: boolean) => {
    if (isOpen) {
      // 打开时根据id获取详情
      const data = drawerApi.getData<Record<string, any>>();
      await baseFormApi.setValues(data);
    }
  },
});
</script>
<template>
  <Modal class="w-[600px]" title="${basicsConfig.businessName}">
    <BaseForm />

    <template #footer>
      <Space>
        <ButtonClose @click="drawerApi.close()" />
        <ButtonSave :loading="saveBtnLoading" @click="handleSave" />
        <% if(basicsConfig.generatorMethodsAdd){ %>
        <ButtonSave
          :loading="saveBtnLoading"
          text="保存并新增"
          @click="handleSaveAndAdd"
        />
        <% } %>
      </Space>
    </template>
  </Modal>
</template>
