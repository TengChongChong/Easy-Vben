<script lang="ts" setup>
import type { VbenFormProps } from '#/adapter/form';
import type { VxeGridProps } from '#/adapter/vxe-table';
import type { ${basicsConfig.modelName} } from '${modelTsPath!}';

import { ref, unref } from 'vue';

import { Page, useVben${basicsConfig.formGeneratorTemplate == 'drawer' ? 'Drawer' : 'Modal'} } from '@vben/common-ui';

import { Button, Space } from 'ant-design-vue';

import { useVbenVxeGrid } from '#/adapter/vxe-table';

import { ${GeneratorVueUtil.getImportButton(basicsConfig)} } from '#/components/button';
import { LucideListOrdered, LucideMinus, LucidePlus } from '#/components/icons';
import { ${GeneratorVueUtil.getListImport(basicsConfig)} } from '${apiTsPath!}';
import { initColumns } from './data';
import Input${basicsConfig.formGeneratorTemplate == 'drawer' ? 'Drawer' : 'Modal'} from './input.vue';
import Order${basicsConfig.formGeneratorTemplate == 'drawer' ? 'Drawer' : 'Modal'} from './order.vue';

const expandIds = ref<string[]>([]);
<% if(basicsConfig.isGeneratorMethodsExport){ %>
// 导出按钮状态
const exportBtnLoading = ref<boolean>(false);
<% } %>
function handleSearch() {
  gridApi.search();
}

const formOptions: VbenFormProps = {
  collapsed: true,
  schema: [
    <% if(queryConfig != null) { %>
    <% for(item in queryConfig){ %>
    {
      fieldName: '${item.propertyName}',
      label: '${item.label}',
      component: '${item.componentType}',
      <% if(strUtil.isNotBlank(item.dictType)) { %>
      componentProps: {
        dictType: '${item.dictType}'
      },
      <% } %>
    },
    <% } %>
    <% } %>
  ],
};

const gridOptions: VxeGridProps<${basicsConfig.modelName}> = {
  id: '${tableId}',
  columns: initColumns(),
  pagerConfig: {
    enabled: false,
  },
  checkboxConfig: {
    range: false,
  },
  treeConfig: {
    transform: true,
    // 用于 tree-config.transform，树节点的字段名
    rowField: 'id',
    // 用于 tree-config.transform，树父节点的字段名
    parentField: 'parentId',
  },
  proxyConfig: {
    ajax: {
      query: async ({ page }, formValues) => {
        // 保持展开状态
        await gridApi.grid.setTreeExpand(unref(expandIds), true);
        return await selectApi({ ...formValues }, page);
      },
    },
  },
};

const [Grid, gridApi] = useVbenVxeGrid({
  tableTitle: '${basicsConfig.businessName}',
  formOptions,
  gridOptions,
  gridEvents: {
    toggleTreeExpand: () => {
      expandIds.value = gridApi.grid.getTreeExpandRecords();
    },
  },
});
<% if(basicsConfig.formGeneratorTemplate == 'drawer'){ %>
const [BaseInputDrawer, baseInputDrawerApi] = useVbenDrawer({
  connectedComponent: InputDrawer,
});
const [BaseOrderDrawer, baseOrderDrawerApi] = useVbenDrawer({
  connectedComponent: OrderDrawer,
});
<% } %>
<% if(basicsConfig.formGeneratorTemplate == 'modal'){ %>
const [BaseInputModal, baseInputModalApi] = useVbenModal({
  connectedComponent: InputModal,
});
const [BaseOrderModal, baseOrderModalApi] = useVbenModal({
  connectedComponent: OrderModal,
});
<% } %>
<% if(basicsConfig.generatorMethodsAdd){ %>
async function handleCreate(id: string) {
  addApi(id).then((res) => {
    baseInput${basicsConfig.formGeneratorTemplate == 'drawer' ? 'Drawer' : 'Modal'}Api.setData(res);
    baseInput${basicsConfig.formGeneratorTemplate == 'drawer' ? 'Drawer' : 'Modal'}Api.open();
  });
}
<% } %>
<% if(basicsConfig.generatorMethodsSave){ %>
function handleEdit(id: string) {
  getApi(id).then((res) => {
    baseInput${basicsConfig.formGeneratorTemplate == 'drawer' ? 'Drawer' : 'Modal'}Api.setData(res);
    baseInput${basicsConfig.formGeneratorTemplate == 'drawer' ? 'Drawer' : 'Modal'}Api.open();
  });
}
<% } %>

function handleOrder() {
  baseOrder${basicsConfig.formGeneratorTemplate == 'drawer' ? 'Drawer' : 'Modal'}Api.open();
}

function handleExpandAll() {
  gridApi.grid?.setAllTreeExpand(true);
}
function handleCollapseAll() {
  gridApi.grid?.clearTreeExpand();
}
<% if(basicsConfig.isGeneratorMethodsExport){ %>
const handelExportData = async () => {
  exportBtnLoading.value = true;
  try {
    await exportDataApi({
      ...(await gridApi.formApi.getValues()),
    }).then((id) => {
      downloadFileById(id);
    });
  } catch (error) {
    console.error('导出数据错误', error);
  } finally {
    exportBtnLoading.value = false;
  }
};
<% } %>
</script>

<template>
  <Page auto-content-height>
    <Grid>
      <template #toolbar-tools>
        <Space>
          <% if(basicsConfig.generatorMethodsAdd){ %>
          <% if(strUtil.isNotBlank(basicsConfig.permissionCode)){ %>
          <ButtonAdd
            :auth-codes="['${basicsConfig.permissionCode}:save']"
            @click="handleCreate"
          />
          <% } else { %>
          <ButtonAdd @click="handleCreate" />
          <% } %>
          <% } %>
          <Button @click="handleOrder">
            <template #icon>
              <LucideListOrdered />
            </template>
            排序
          </Button>
          <Button @click="handleExpandAll">
            <template #icon>
              <LucidePlus />
            </template>
            展开全部
          </Button>
          <Button @click="handleCollapseAll">
            <template #icon>
              <LucideMinus />
            </template>
            折叠全部
          </Button>
          <% if(basicsConfig.generatorMethodsRemove){ %>
          <% if(strUtil.isNotBlank(basicsConfig.permissionCode)){ %>
          <ButtonRemove
            :api="removeApi"
            :auth-codes="['${basicsConfig.permissionCode}:remove']"
            :grid-api="gridApi"
            @success="handleSearch"
          />
          <% } else { %>
          <ButtonRemove
            :api="removeApi"
            :grid-api="gridApi"
            @success="handleSearch"
          />
          <% } %>
          <% } %>
          <% if(basicsConfig.isGeneratorMethodsImport){ %>
          <ButtonImport
            import-code="${basicsConfig.permissionCode}"
            ${strUtil.isNotBlank(basicsConfig.permissionCode) ? ':auth-codes="[' + basicsConfig.permissionCode + ':import:data']" ' : ''}
          />
          <% } %>

          <% if(basicsConfig.isGeneratorMethodsExport){ %>
          <ButtonExport
            :loading="exportBtnLoading"
            @click="handelExportData"
          />
          <% } %>
        </Space>
      </template>
      <template #action="{ row }">
      <% if(basicsConfig.generatorMethodsAdd){ %>
        <% if(strUtil.isNotBlank(basicsConfig.permissionCode)){ %>
        <ButtonAdd
          :auth-codes="['${basicsConfig.permissionCode}:save']"
          size="small"
          text="新增下级"
          type="link"
          @click="handleCreate(row.id)"
        />
        <% } else { %>
        <ButtonAdd
          size="small"
          text="新增下级"
          type="link"
          @click="handleCreate(row.id)"
        />
        <% } %>
        <% } %>
        <% if(basicsConfig.generatorMethodsSave){ %>
        <% if(strUtil.isNotBlank(basicsConfig.permissionCode)){ %>
        <ButtonEdit
          :auth-codes="['${basicsConfig.permissionCode}:save']"
          size="small"
          type="link"
          @click="handleEdit(row.id)"
        />
        <% } else { %>
        <ButtonEdit
          size="small"
          type="link"
          @click="handleEdit(row.id)"
        />
        <% } %>
        <% } %>
        <% if(basicsConfig.generatorMethodsRemove){ %>
        <% if(strUtil.isNotBlank(basicsConfig.permissionCode)){ %>
        <ButtonRemove
          :api="removeApi"
          :auth-codes="['${basicsConfig.permissionCode}:remove']"
          :ids="[row.id]"
          size="small"
          type="link"
          @success="handleSearch"
        />
        <% } else { %>
        <ButtonRemove
          :api="removeApi"
          :ids="[row.id]"
          size="small"
          type="link"
          @success="handleSearch"
        />
        <% } %>
        <% } %>
      </template>
    </Grid>

    <!--  编辑  -->
    <BaseInput${basicsConfig.formGeneratorTemplate == 'drawer' ? 'Drawer' : 'Modal'} @success="handleSearch" />
    <!--  排序  -->
    <BaseOrder${basicsConfig.formGeneratorTemplate == 'drawer' ? 'Drawer' : 'Modal'} @success="handleSearch" />
  </Page>
</template>